const std = @import("std");
const debug = std.debug;
const poly = @import("poly.zig");
const chacha = @import("chacha.zig");

pub fn encrypt(allocator: std.mem.Allocator, dest: []u8, plaintext: []u8, aad: []u8, key: [32]u8, iv: []u8, constant: []u8) anyerror!void {
    debug.assert(iv.len + constant.len == 12);

    var nonce: [12]u8 = undefined;
    std.mem.copy(u8, nonce[0..constant.len], constant);
    std.mem.copy(u8, nonce[constant.len..], iv);

    var ciphertext = dest[0..plaintext.len];

    chacha.encrypt(ciphertext, plaintext, key, nonce, 1);

    var otk = poly.Poly.keyGen(key, nonce);

    var macData = try constructMacData(allocator, aad, ciphertext);
    defer allocator.free(macData);

    var ply = try poly.Poly.init(allocator);
    defer ply.deinit();
    var mac = try ply.mac(allocator, macData, &otk);
    defer allocator.free(mac);

    std.mem.copy(u8, dest[plaintext.len..], mac);
}

fn constructMacData(allocator: std.mem.Allocator, aad: []u8, ciphertext: []u8) anyerror![]u8 {
    var aadSize = paddedSize(aad);
    var ciphertextSize = paddedSize(ciphertext);

    // MEMO alloc と fee の場所について再考
    const macData = try allocator.alloc(u8, aadSize + ciphertextSize + 8 + 8);
    std.mem.set(u8, macData, 0);

    var head = macData;

    std.mem.copy(u8, head[0..aadSize], aad);
    head = head[aadSize..];

    std.mem.copy(u8, head[0..ciphertextSize], ciphertext);
    head = head[ciphertextSize..];

    std.mem.writeIntLittle(usize, head[0..8], aad.len);
    head = head[8..];
    std.mem.writeIntLittle(usize, head[0..8], ciphertext.len);
    return macData;
}

fn paddedSize(d: []u8) usize {
    if (d.len == 0) {
        return 0;
    }
    return d.len + 16 - (d.len % 16);
}

test "aead.encrypt" {
    debug.print("\n", .{});
    var tc = .{
        .aad = [_]u8{
            0x50, 0x51, 0x52, 0x53,
            0xc0, 0xc1, 0xc2, 0xc3,
            0xc4, 0xc5, 0xc6, 0xc7,
        },
        .key = [_]u8{
            0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
            0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
            0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
            0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
        },
        .iv = [_]u8{
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        },
        .constant = [_]u8{
            0x07, 0x00, 0x00, 0x00,
        },
        .plaintext = [_]u8{
            0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61,
            0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
            0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20,
            0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
            0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39,
            0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
            0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66,
            0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
            0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20,
            0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
            0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75,
            0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
            0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f,
            0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
            0x74, 0x2e,
        },
        .want = [_]u8{
            // ciphertext
            0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b,
            0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2, 0xa4, 0xad,
            0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5,
            0xa7, 0x36, 0xee, 0x62, 0xd6, 0x3d, 0xbe, 0xa4, 0x5e,
            0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa, 0xfb, 0x69, 0xda,
            0x92, 0x72, 0x8b, 0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06,
            0x0b, 0x29, 0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b,
            0x36, 0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c,
            0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58, 0xfa,
            0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85,
            0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc, 0x3f, 0xf4, 0xde,
            0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5, 0x76, 0xd2, 0x65,
            0x86, 0xce, 0xc6, 0x4b, 0x61, 0x16,
            // tag
            0x1a, 0xe1, 0x0b,
            0x59, 0x4f, 0x09, 0xe2, 0x6a, 0x7e, 0x90, 0x2e, 0xcb,
            0xd0, 0x60, 0x06, 0x91,
        },
    };
    const allocator = std.testing.allocator;
    // const allocator = std.heap.page_allocator;
    const dest = try allocator.alloc(u8, tc.plaintext.len + 16);
    defer allocator.free(dest);

    try encrypt(allocator, dest, &tc.plaintext, &tc.aad, tc.key, &tc.iv, &tc.constant);

    debug.print("x={x}\n", .{std.fmt.fmtSliceHexLower(dest)});

    try std.testing.expectEqualSlices(u8, &tc.want, dest);
}
